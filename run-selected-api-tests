const fs = require('fs');
const path = require('path');
const { parse } = require('csv-parse/sync'); // Using sync for simplicity in a script
const { execSync } = require('child_process');

const csvFilePath = path.join(__dirname, 'Testcase.csv');
const testsFolderPath = path.join(__dirname, 'tests', 'API_Test'); // Target specific folder

// --- Read and Parse CSV ---
let records;
try {
  const csvContent = fs.readFileSync(csvFilePath, 'utf8');
  records = parse(csvContent, {
    columns: true, // Use header row to determine object keys
    skip_empty_lines: true,
    trim: true,
  });
} catch (error) {
  console.error(`‚ùå Error reading or parsing CSV file at ${csvFilePath}:`, error);
  process.exit(1); // Exit with error code
}

// --- Filter Enabled Test Cases ---
const enabledTestCases = records
  .filter(record => record.Control && record.Control.toUpperCase() === 'Y' && record.TestCaseID)
  .map(record => record.TestCaseID);

if (enabledTestCases.length === 0) {
  console.warn('‚ö†Ô∏è No test cases marked with "Y" in the Control column found in CSV. Exiting.');
  process.exit(0); // Exit successfully, no tests to run
}

console.log(`‚ñ∂Ô∏è Found ${enabledTestCases.length} enabled test cases:`);
console.log(enabledTestCases.join(', '));

// --- Construct Playwright Command ---
// Escape special regex characters in TestCaseIDs just in case, although unlikely needed for typical IDs
const grepPattern = enabledTestCases
  .map(id => id.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')) // Escape regex special chars
  .join('|'); // Join with OR operator for regex

// Get any additional arguments passed to this script (e.g., --headed, --project)
const additionalArgs = process.argv.slice(2).join(' ');

// Construct the full command
// We target the specific API_Test folder
const command = `npx playwright test ${testsFolderPath} --grep="${grepPattern}" ${additionalArgs}`;

console.log(`\nüöÄ Executing command:\n${command}\n`);

// --- Execute Playwright ---
try {
  // Execute the command and pipe stdout/stderr to the current process
  execSync(command, { stdio: 'inherit' });
  console.log('\n‚úÖ Playwright execution finished successfully.');
  process.exit(0);
} catch (error) {
  // execSync throws an error if the command exits with a non-zero code (e.g., test failures)
  console.error('\n‚ùå Playwright execution failed or tests did not pass.');
  // The error object often doesn't contain useful stdout/stderr when stdio: 'inherit' is used
  // Playwright's own output above should indicate the failures.
  process.exit(1); // Exit with error code
}
